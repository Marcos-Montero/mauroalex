generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  age                 Int?
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  weight              Float?
  goalWeight          Float?
  workoutAssignedDate DateTime?
  workoutId           String?
  nickname            String?
  specialty           Boolean?
  accounts            Account[]
  rankingEntries      RankingEntry[]
  sessions            Session[]
  workout             Workout?        @relation("UserWorkout")
  challengeSet        ChallengeSet?   @relation("UserChallengeSet")
  records             Record[]
  userTrophies        UserTrophies[]
  UserBlogEntry       UserBlogEntry[]
  UserPrompts         UserPrompts[]
}

model Trophy {
  id           String         @id @default(cuid())
  name         String
  description  String?
  userTrophies UserTrophies[]
}

model UserTrophies {
  userId   String
  trophyId String
  user     User   @relation(fields: [userId], references: [id])
  trophy   Trophy @relation(fields: [trophyId], references: [id], onDelete: Cascade)

  @@id([userId, trophyId])
}

model BasicExercise {
  id     String   @id @default(cuid())
  name   String
  Record Record[]
}

model Record {
  id              String        @id @default(cuid())
  timestamp       DateTime      @default(now())
  mark            Float
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  basicExerciseId String
  basicExercise   BasicExercise @relation(fields: [basicExerciseId], references: [id])
}

model Ranking {
  id             String         @id @default(cuid())
  title          String
  measures       Measure[]
  rankingEntries RankingEntry[]
}

model Measure {
  id        String              @id @default(cuid())
  name      String
  rankingId String
  ranking   Ranking             @relation(fields: [rankingId], references: [id], onDelete: Cascade)
  entries   RankingEntryValue[]
}

model RankingEntry {
  id        String              @id @default(cuid())
  rankingId String
  userId    String
  ranking   Ranking             @relation(fields: [rankingId], references: [id], onDelete: Cascade)
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  values    RankingEntryValue[]

  @@unique([rankingId, userId])
}

model RankingEntryValue {
  id             String       @id @default(cuid())
  rankingEntryId String
  measureId      String
  value          Float
  measure        Measure      @relation(fields: [measureId], references: [id], onDelete: Cascade)
  rankingEntry   RankingEntry @relation(fields: [rankingEntryId], references: [id], onDelete: Cascade)
}

model Workout {
  id        String     @id @default(cuid())
  userId    String?    @unique
  exercises Exercise[]
  user      User?      @relation("UserWorkout", fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
  id        String  @id @default(cuid())
  name      String
  mark      String
  workoutId String
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

model ChallengeSet {
  id         String      @id @default(cuid())
  userId     String?     @unique
  challenges Challenge[]
  user       User?       @relation("UserChallengeSet", fields: [userId], references: [id], onDelete: Cascade)
}

model Challenge {
  id             String       @id @default(cuid())
  name           String
  challengeSetId String
  challengeSet   ChallengeSet @relation(fields: [challengeSetId], references: [id], onDelete: Cascade)
}

model BlogEntry {
  id              String          @id @default(cuid())
  title           String
  content         String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userBlogEntries UserBlogEntry[]
}

model UserBlogEntry {
  userId      String
  blogEntryId String
  user        User      @relation(fields: [userId], references: [id])
  blogEntry   BlogEntry @relation(fields: [blogEntryId], references: [id])

  @@id([userId, blogEntryId])
}

model UserPrompts {
  id       String  @id @default(cuid())
  userId   String
  prompt   String
  selected Boolean
  user     User    @relation(fields: [userId], references: [id])
}
